plugins {
    id 'java'
    id 'idea'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group 'FinancialStatementsService'
version '1.0'

ext {
    springBootVersion = '2.1.3.RELEASE'
    openFeignVersion = '10.3.0'
    libVersion = '1.0.0b-SNAPSHOT'
}

ext.moduleSourcePath = { moduleName ->
    def classOutputDirConst = "/classes/java/main"
    return "${project(":${moduleName}").buildDir}${classOutputDirConst}"
}


ext.moduleClassPath = { moduleName ->
    def classOutputDirConst = "/classes/java/main"
    return "${project(":${moduleName}").buildDir}${classOutputDirConst}"
}
ext.moduleSourcePath = { moduleName ->
    def sourceDirConst = "/src/main/java"
    return "${project(":${moduleName}").projectDir}${sourceDirConst}"
}
def removeDependency = { NodeList dependencyArray,
                         String groupIdToRemove, String artifactIdToRemove ->
    dependencyArray.removeIf { el ->
        def groupId = el.value().get(0).value().get(0)
        def artifactId = el.value().get(1).value().get(0)
        def deletedNode = (groupId as String).equalsIgnoreCase(groupIdToRemove) && (artifactId as String).equalsIgnoreCase(artifactIdToRemove)
        if (deletedNode) {
            println("group ${groupId}")
            println("artifact ${artifactId}")
        }
        return deletedNode;
    }
}

task sourcesJar(type: Jar) {
    from(moduleSourcePath("client"),moduleSourcePath("common-entities"))
    classifier "sources"
}

jar {
    from(moduleClassPath("client"),moduleSourcePath("common-entities"))
}

artifacts {
    archives sourcesJar
}



publishing {
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            name = "devLocal"
        }
        maven {
            name = "tekionArt"
            url("https://tkartifactory.tekioncloud.xyz/repository/tek-product-maven-snapshots")
            credentials {
                username = "${mavenUser}"
                password = "${mavenPassword}"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifacts = [artifact(jar), artifact(sourcesJar)]
            pom {
                groupId = "com.tekion.financialstatements"
                artifactId = "financialstatements-client"
                version = "${libVersion}"
            }
            pom.withXml {
                def node = asNode().get('dependencies')
                def dependenciesArray = node.get(0).get("dependency")
                asNode().remove(node)
                asNode().appendNode('dependencies', dependenciesArray)
                println("courtesy of aman :)")
            }
        }
    }
}



sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://tkartifactory.tekioncloud.xyz/repository/tek-product-maven-snapshots'
        credentials {
            username = "${mavenUser}"
            password = "${mavenPassword}"
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation('com.tekion.sdk:servicecommons:3.0.31-SNAPSHOT')
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation("io.github.openfeign:feign-okhttp:${openFeignVersion}")
    implementation("io.github.openfeign:feign-hystrix:${openFeignVersion}")
    implementation("io.github.openfeign:feign-jackson:${openFeignVersion}")
    implementation("io.github.openfeign:feign-core:${openFeignVersion}")
    implementation('org.springframework.cloud:spring-cloud-starter-zipkin')
}
